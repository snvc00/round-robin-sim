{"version":3,"sources":["components/Title/Title.js","components/Window/Window.js","utils/Process.js","utils/interruptions.js","utils/processes.js","utils/Memory.js","pages/RoundRobin/RoundRobin.js","App.js","index.js"],"names":["Title","children","className","Window","title","icon","Frame","boxShadow","marginBottom","TitleBar","active","width","OptionsBox","Option","style","minHeight","padding","Process","id","this","maxTime","Math","floor","random","executionTime","operator","firstOperand","secondOperand","error","timeToUnblock","arrivalTime","startTime","endTime","undefined","quantum","size","memoryAddress","evaluate","pow","result","globalTime","standbyTime","partialLog","INTERRUPTIONS","e","description","w","p","c","n","b","t","s","r","generateProcesses","totalProcesses","startId","processes","i","push","Memory","memory","Array","freeSpace","allocatedBy","process","requiredMemoryFrames","ceil","freeFrames","forEach","frame","index","length","j","memoryToAlloc","min","Container","styled","div","RoundRobin","processingDone","useState","setGlobalTime","actionLogs","setActionLogs","setMemory","newProcesses","setNewProcesses","readyProcesses","setReadyProcesses","processInExecution","setProcessInExecution","blockedProcesses","setBlockedProcesses","suspendedProcesses","terminatedProcesses","setTerminatedProcesses","isPaused","setIsPaused","isProcessing","setIsProcessing","Date","lastKeyDown","setLastKeyDown","reportLogged","setReportLogged","lastUpdate","setLastUpdate","simulationEnd","setSimulationEnd","nextId","setNextId","onkeydown","key","toLowerCase","operationWasPerformed","now","toLocaleTimeString","block","resetQuantum","nextProc","shift","throwError","newProcess","alloc","logPartialProgress","processToSuspend","dealloc","nextProccess","unshift","processToAlloc","console","log","useEffect","newProcs","readyProcs","procToExecute","interval","setInterval","clearInterval","report","proc","procsToUnblock","update","updateBlockedProcesses","isTerminated","readyProc","nextReadyProc","textAlign","Button","onClick","variant","map","Fieldset","legend","operation","ProgressBar","percent","round","isArray","renderSuspendedProcessesPeek","TextArea","readOnly","value","height","memoryStatus","getCopy","color","getMemoryColor","align","repeat","renderMemoryVisualization","TaskBar","list","List","Item","Form","form","App","setTotalProcesses","setQuantum","onSubmit","preventDefault","Input","placeholder","type","onChange","target","required","parseInt","ReactDOM","render","ThemeProvider","GlobalStyle","document","getElementById"],"mappings":"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","file":"static/js/main.f82f6be2.chunk.js","sourcesContent":["import './Title.css'\nimport PropTypes from 'prop-types'\nimport React from 'react'\n\nconst Title = ({ children }) => {\n  return (\n    <h1 className='title'>{children}</h1>\n  )\n}\n\nTitle.propTypes = {\n  children: PropTypes.string\n}\n\nexport default Title\n","import { TitleBar, Frame } from '@react95/core'\nimport PropTypes from 'prop-types'\nimport React from 'react'\n\nconst Window = ({ children, title, icon }) => {\n  return (\n    <Frame boxShadow='out' marginBottom='10px'>\n      <TitleBar\n        active\n        icon={icon}\n        title={title}\n        width='100%'\n      >\n        <TitleBar.OptionsBox>\n          <TitleBar.Option>X</TitleBar.Option>\n        </TitleBar.OptionsBox>\n      </TitleBar>\n      <div style={{ minHeight: 200, padding: 10 }}>\n        {children}\n      </div>\n    </Frame>\n  )\n}\n\nWindow.propTypes = {\n  children: PropTypes.oneOfType([\n    PropTypes.object,\n    PropTypes.array\n  ]),\n  title: PropTypes.string,\n  icon: PropTypes.object\n}\n\nexport default Window\n","class Process {\n  constructor (id) {\n    this.id = id\n    this.maxTime = Math.floor(Math.random() * 10) + 6\n    this.executionTime = 0\n    this.operator = ['+', '-', '*', '/', '%', '^'][Math.floor(Math.random() * 6)]\n    this.firstOperand = Math.floor(Math.random() * 100)\n    this.secondOperand = Math.floor(Math.random() * 100) + 1\n    this.error = false\n    this.timeToUnblock = 0\n    this.arrivalTime = -1\n    this.startTime = -1\n    this.endTime = undefined\n    this.quantum = 0\n    this.size = Math.floor(Math.random() * (26 - 6) + 6)\n    this.memoryAddress = null\n  }\n\n  get operation () {\n    return `${this.firstOperand} ${this.operator} ${this.secondOperand}`\n  }\n\n  get result () {\n    return this.error === true ? 'ERROR' : this.evaluate()\n  }\n\n  throwError () {\n    this.error = true\n  }\n\n  block () {\n    this.timeToUnblock = 7\n  }\n\n  update () {\n    if (this.timeToUnblock > 0) {\n      --this.timeToUnblock\n    } else {\n      ++this.executionTime\n      ++this.quantum\n    }\n  }\n\n  isTerminated () {\n    return this.error === true || (this.maxTime === this.executionTime)\n  }\n\n  evaluate () {\n    switch (this.operator) {\n      case '+':\n        return this.firstOperand + this.secondOperand\n      case '-':\n        return this.firstOperand - this.secondOperand\n      case '*':\n        return this.firstOperand * this.secondOperand\n      case '/':\n        return this.firstOperand / this.secondOperand\n      case '%':\n        return this.firstOperand % this.secondOperand\n      case '^':\n        return Math.pow(this.firstOperand, this.secondOperand)\n      default:\n        return 'UNDEFINED'\n    }\n  }\n\n  resetQuantum () {\n    this.quantum = 0\n  }\n\n  toString () {\n    return `Process ${this.id}: ${this.firstOperand} ${this.operator} ${this.secondOperand} = ${this.result} took ${this.executionTime} seconds`\n  }\n\n  log () {\n    return `** PID ${this.id}, ${this.error ? 'ERROR' : 'NORMAL'} **\\n\n            Estimated Time: ${this.maxTime}\n            Arrival Time: ${this.arrivalTime}\n            End Time: ${this.endTime}\n            Standby Time: ${(this.endTime - this.arrivalTime) - this.executionTime}\n            Service Time: ${this.executionTime}\n            Return Time: ${this.endTime - this.arrivalTime}\n            Response Time: ${this.startTime - this.arrivalTime}\\n\\n************`\n  }\n\n  partialLog (globalTime) {\n    let standbyTime\n    if (this.endTime !== undefined) {\n      standbyTime = (this.endTime - this.arrivalTime) - this.executionTime\n    } else if (this.arrivalTime !== -1) {\n      standbyTime = globalTime - this.arrivalTime - this.executionTime\n    } else {\n      standbyTime = '-'\n    }\n\n    let partialLog = `** PID ${this.id}, ${this.error ? 'ERROR' : 'NORMAL'} **\\n`\n    partialLog += `\\tEstimated Time: ${this.maxTime}\\n`\n    partialLog += `\\tArrival Time: ${this.arrivalTime !== -1 ? this.arrivalTime : '-'}\\n`\n    partialLog += `\\tEnd Time: ${this.endTime ?? '-'}\\n`\n    partialLog += `\\tStandby Time: ${standbyTime}\\n`\n    partialLog += `\\tService Time: ${this.arrivalTime !== -1 ? this.executionTime : '-'}\\n`\n    partialLog += `\\tReturn Time: ${this.endTime ? (this.endTime - this.arrivalTime) : '-'}\\n`\n    partialLog += `\\tRemaining Time on CPU: ${this.startTime !== -1 ? (this.maxTime - this.executionTime) : '-'}\\n`\n    partialLog += `\\tResponse Time: ${(this.startTime !== -1 && this.arrivalTime !== -1) ? (this.startTime - this.arrivalTime) : '-'}\\n`\n\n    return partialLog\n  }\n}\n\nexport default Process\n","export const INTERRUPTIONS = {\n  e: {\n    description: 'I/O interruption'\n  },\n  w: {\n    description: 'Error in process'\n  },\n  p: {\n    description: 'Pause'\n  },\n  c: {\n    description: 'Continue'\n  },\n  n: {\n    description: 'New process'\n  },\n  b: {\n    description: 'Process table'\n  },\n  t: {\n    description: 'Memory visualization'\n  },\n  s: {\n    description: 'Suspend process'\n  },\n  r: {\n    description: 'Allocate suspended process'\n  }\n}\n","import { Process } from '.'\n\nexport const generateProcesses = (totalProcesses, startId = undefined) => {\n  let id = startId ?? 0\n  const processes = []\n  for (let i = 0; i < totalProcesses; ++i) {\n    processes.push(new Process(id++))\n  }\n\n  return processes\n}\n","import { Process } from '.'\n\nclass Memory {\n  constructor () {\n    this.memory = new Array(40)\n    for (let i = 0; i < 38; i++) {\n      this.memory[i] = { freeSpace: 5, allocatedBy: null }\n    }\n\n    this.memory[38] = { freeSpace: 0, allocatedBy: 'OS' }\n    this.memory[39] = { freeSpace: 0, allocatedBy: 'OS' }\n  }\n\n  getCopy () {\n    return [...this.memory]\n  }\n\n  alloc (process) {\n    if (!(process instanceof Process)) {\n      return false\n    }\n\n    const requiredMemoryFrames = Math.ceil(process.size / 5)\n    const freeFrames = []\n    this.memory.forEach((frame, index) => {\n      if (frame.freeSpace === 5) {\n        freeFrames.push(index)\n      }\n    })\n\n    if (freeFrames.length < requiredMemoryFrames) {\n      return false\n    }\n\n    process.memoryAddress = freeFrames[0]\n    for (let i = process.size, j = 0; i > 0;) {\n      const memoryToAlloc = Math.min(5, i)\n\n      this.memory[freeFrames[j]].freeSpace -= memoryToAlloc\n      this.memory[freeFrames[j]].allocatedBy = process.id\n      i -= memoryToAlloc\n      j++\n    }\n\n    return true\n  }\n\n  dealloc (process) {\n    if (!(process instanceof Process) || process.memoryAddress === null) {\n      return false\n    }\n\n    this.memory.forEach((frame) => {\n      if (frame.allocatedBy === process.id) {\n        frame.allocatedBy = null\n        frame.freeSpace = 5\n      }\n    })\n\n    return true\n  }\n}\n\nexport default Memory\n","import './RoundRobin.css'\nimport styled from 'styled-components'\n\nimport { ProgressBar, Fieldset, TextArea, TaskBar, List, Button } from '@react95/core'\nimport { Notepad, BatWait, BatExec2, Qfecheck111, RecycleEmpty, User2, Memory as MemoryIcon, ReaderCd2 } from '@react95/icons'\nimport React, { useEffect, useState } from 'react'\nimport PropTypes from 'prop-types'\n\nimport Window from '../../components/Window'\nimport { INTERRUPTIONS, generateProcesses, Process } from '../../utils'\nimport Memory from '../../utils/Memory'\n\nconst Container = styled.div`\n  margin: auto;\n  padding: 10px;\n  display: block;\n  width: 60%;\n`\n\nconst RoundRobin = ({ totalProcesses, processingDone, quantum }) => {\n  const [globalTime, setGlobalTime] = useState(0)\n  const [actionLogs, setActionLogs] = useState('')\n  const [memory, setMemory] = useState(new Memory())\n  const [newProcesses, setNewProcesses] = useState([])\n  const [readyProcesses, setReadyProcesses] = useState([])\n  const [processInExecution, setProcessInExecution] = useState()\n  const [blockedProcesses, setBlockedProcesses] = useState([])\n  const [suspendedProcesses] = useState([])\n  const [terminatedProcesses, setTerminatedProcesses] = useState([])\n  const [isPaused, setIsPaused] = useState(false)\n  const [isProcessing, setIsProcessing] = useState(true)\n  const [lastKeyDown, setLastKeyDown] = useState(new Date())\n  const [reportLogged, setReportLogged] = useState(false)\n  const [lastUpdate, setLastUpdate] = useState(new Date())\n  const [simulationEnd, setSimulationEnd] = useState(null)\n  const [nextId, setNextId] = useState(totalProcesses)\n\n  onkeydown = ({ key }) => {\n    key = key.toLowerCase()\n    let operationWasPerformed = false\n    const now = new Date()\n    setLastKeyDown(now)\n\n    if ((now - lastKeyDown) < 1000) {\n      setActionLogs(actionLogs + `[${now.toLocaleTimeString()}, Global Time: ${globalTime} seconds] - Actions are limited to 1 per second\\n`)\n      return\n    }\n\n    if (INTERRUPTIONS?.[key]) {\n      switch (key) {\n        case 'e':\n          if (isPaused === false && processInExecution instanceof Process) {\n            processInExecution.block()\n            processInExecution.resetQuantum()\n            blockedProcesses.push(processInExecution)\n            const nextProc = readyProcesses.shift()\n            if (nextProc instanceof Process) {\n              if (nextProc.startTime === -1) {\n                nextProc.startTime = globalTime\n              }\n              setProcessInExecution(nextProc)\n            } else {\n              setProcessInExecution(null)\n            }\n            operationWasPerformed = true\n          }\n          break\n        case 'w':\n          if (isPaused === false && processInExecution instanceof Process) {\n            processInExecution.throwError()\n            operationWasPerformed = true\n          }\n          break\n        case 'p':\n        case 't':\n          if (isPaused === false) {\n            setIsPaused(true)\n            operationWasPerformed = true\n          }\n          break\n        case 'c':\n          if (isPaused === true) {\n            setIsPaused(false)\n            operationWasPerformed = true\n          }\n          break\n        case 'n':\n          if (isPaused === false) {\n            const newProcess = generateProcesses(1, nextId)[0]\n            setNextId(nextId + 1)\n\n            const wasAllocated = memory.alloc(newProcess)\n            if (!wasAllocated) {\n              newProcesses.push(newProcess)\n            } else {\n              newProcess.arrivalTime = globalTime\n              readyProcesses.push(newProcess)\n            }\n\n            operationWasPerformed = true\n          }\n          break\n        case 'b':\n          if (isPaused === false) {\n            setIsPaused(true)\n            logPartialProgress()\n          }\n          break\n        case 's':\n          if (isPaused === false && blockedProcesses.length > 0) {\n            const processToSuspend = blockedProcesses.shift()\n            processToSuspend.timeToUnblock = 0\n            memory.dealloc(processToSuspend)\n            suspendedProcesses.push(processToSuspend)\n\n            // A process was deallocated, so check if there a chance to allocate a new one\n            if (newProcesses.length > 0) {\n              const nextProccess = newProcesses.shift()\n              const wasAllocated = memory.alloc(nextProccess)\n\n              if (wasAllocated) {\n                nextProccess.arrivalTime = globalTime\n                readyProcesses.push(nextProccess)\n              } else {\n                newProcesses.unshift(nextProccess)\n              }\n            }\n\n            operationWasPerformed = true\n          }\n          break\n        case 'r':\n          if (isPaused === false && suspendedProcesses.length > 0) {\n            const processToAlloc = suspendedProcesses.shift()\n            const wasAllocated = memory.alloc(processToAlloc)\n\n            if (wasAllocated) {\n              readyProcesses.push(processToAlloc)\n              operationWasPerformed = true\n            } else {\n              suspendedProcesses.unshift(processToAlloc)\n            }\n          }\n          break\n        default:\n          console.log(`Not implemented action triggered with ${key}`)\n      }\n\n      if (operationWasPerformed === true) {\n        setActionLogs(actionLogs + `[${new Date().toLocaleTimeString()}, Global Time: ${globalTime} seconds] - ${INTERRUPTIONS[key].description}\\n`)\n      }\n    }\n  }\n\n  const logPartialProgress = () => {\n    let log = actionLogs + `[${new Date().toLocaleTimeString()}, Global Time: ${globalTime} seconds] - ${INTERRUPTIONS.b.description}\\n`\n\n    newProcesses.forEach((process) => {\n      log += process.partialLog(globalTime) + '\\tStatus: New\\n************\\n'\n    })\n\n    readyProcesses.forEach((process) => {\n      log += process.partialLog(globalTime) + '\\tStatus: Ready\\n************\\n'\n    })\n\n    if (processInExecution instanceof Process) {\n      log += processInExecution.partialLog(globalTime) + '\\tStatus: In Execution\\n************\\n'\n    }\n\n    terminatedProcesses.forEach((process) => {\n      log += process.partialLog(globalTime) + '\\tStatus: Terminated\\n************\\n'\n    })\n\n    setActionLogs(log)\n  }\n\n  const getMemoryColor = (allocatedBy) => {\n    if (allocatedBy === null) {\n      return 'transparent'\n    }\n\n    if (allocatedBy === 'OS') {\n      return 'black'\n    }\n\n    if (processInExecution instanceof Process && allocatedBy === processInExecution.id) {\n      return 'red'\n    }\n\n    for (let i = 0; i < readyProcesses.length; i++) {\n      if (allocatedBy === readyProcesses[i].id) {\n        return 'blue'\n      }\n    }\n\n    for (let i = 0; i < blockedProcesses.length; i++) {\n      if (allocatedBy === blockedProcesses[i].id) {\n        return 'purple'\n      }\n    }\n  }\n\n  const renderMemoryVisualization = () => {\n    const memoryStatus = memory.getCopy()\n    memoryStatus.forEach((frame) => {\n      frame.color = getMemoryColor(frame.allocatedBy)\n    })\n\n    return (\n      <Window title='main.memory - Memory' icon={<MemoryIcon variant='32x32_4' />}>\n        <table>\n          <thead>\n            <tr>\n              <th># Frame</th>\n              <th>Memory</th>\n            </tr>\n          </thead>\n          <tbody>\n            {\n              memoryStatus.map((frame, index) => (\n                <tr key={index}>\n                  <td align='center'>{index}</td>\n                  <td style={{ color: frame.color }}>{frame.allocatedBy ?? ''} {'▮'.repeat(5 - frame.freeSpace)}</td>\n                </tr>\n              ))\n            }\n          </tbody>\n        </table>\n      </Window>\n    )\n  }\n\n  const renderSuspendedProcessesPeek = () => {\n    if (suspendedProcesses.length > 0) {\n      const process = suspendedProcesses[0]\n      return (\n        <Window title='suspended - Process simulation' icon={<ReaderCd2 variant='32x32_4' />}>\n          <Fieldset legend={`PID ${process.id}`} style={{ width: '90%', textAlign: 'left', marginBottom: 10 }}>\n            <p>Size: {process.size}MB - Required memory pages: {Math.ceil(process.size / 5)}</p>\n          </Fieldset>\n        </Window>\n      )\n    }\n  }\n\n  useEffect(() => {\n    const newProcs = generateProcesses(totalProcesses)\n    const readyProcs = []\n\n    const procToExecute = newProcs.shift()\n    procToExecute.arrivalTime = 0\n    procToExecute.startTime = 0\n    memory.alloc(procToExecute)\n\n    while (newProcs.length > 0) {\n      const nextProccess = newProcs.shift()\n      const wasAllocated = memory.alloc(nextProccess)\n\n      if (!wasAllocated) {\n        newProcs.unshift(nextProccess)\n        break\n      }\n\n      nextProccess.arrivalTime = 0\n      readyProcs.push(nextProccess)\n    }\n\n    setNewProcesses(newProcs)\n    setProcessInExecution(procToExecute)\n    setReadyProcesses(readyProcs)\n  }, [totalProcesses])\n\n  const updateBlockedProcesses = () => {\n    let procsToUnblock = 0\n    blockedProcesses.forEach((process) => {\n      if (process.timeToUnblock === 0) {\n        ++procsToUnblock\n      } else {\n        process.update()\n      }\n    })\n\n    for (let i = 0; i < procsToUnblock; ++i) {\n      readyProcesses.push(blockedProcesses.shift())\n    }\n  }\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      if (!isPaused) {\n        setGlobalTime(globalTime => globalTime + 1)\n      }\n    }, 1000)\n\n    return () => clearInterval(interval)\n  }, [isPaused])\n\n  useEffect(() => {\n    // Avoid updating more than 1 t/s\n    const now = new Date()\n    if ((now - lastUpdate) < 900) {\n      return\n    }\n    setLastUpdate(now)\n\n    // Check if process end\n    if (newProcesses.length === 0 && readyProcesses.length === 0 && blockedProcesses.length === 0 && processInExecution === null) {\n      setIsProcessing(false)\n      if (simulationEnd === null) {\n        setSimulationEnd(globalTime)\n      }\n      setMemory(new Memory())\n      return\n    }\n\n    if (isProcessing === false && reportLogged === false) {\n      let report = `[${new Date().toLocaleTimeString()}, Global Time: ${globalTime} seconds] - All process terminated, generating report...\\n--------------------\\n`\n      terminatedProcesses.forEach(proc => {\n        report += proc.log() + '\\n'\n      })\n      report += '--------------------\\n'\n\n      setActionLogs(actionLogs + report)\n      setReportLogged(true)\n      setProcessInExecution(null)\n    }\n\n    if (isPaused === false && isProcessing === true) {\n      updateBlockedProcesses()\n\n      if (processInExecution instanceof Process) {\n        if (processInExecution.isTerminated()) {\n          // Push to terminated\n          processInExecution.endTime = globalTime - 1\n          memory.dealloc(processInExecution)\n          terminatedProcesses.push(processInExecution)\n\n          // If there is a new process add it to ready\n          if (newProcesses.length > 0) {\n            const readyProc = newProcesses.shift()\n            const wasAllocated = memory.alloc(readyProc)\n\n            if (!wasAllocated) {\n              newProcesses.unshift(readyProc)\n            } else {\n              if (readyProc.arrivalTime === -1) {\n                readyProc.arrivalTime = globalTime\n              }\n              readyProcesses.push(readyProc)\n            }\n          }\n\n          // Define next process will be executed\n          const nextReadyProc = readyProcesses.shift()\n          if (nextReadyProc instanceof Process) {\n            if (nextReadyProc.startTime === -1) {\n              nextReadyProc.startTime = globalTime\n            }\n            setProcessInExecution(nextReadyProc)\n          } else {\n            // If there are no blocked processes, end processing\n            if (blockedProcesses.length === 0) {\n              setIsProcessing(false)\n              if (simulationEnd === null) {\n                setSimulationEnd(globalTime)\n              }\n            } else {\n              setProcessInExecution(null)\n            }\n          }\n        } else {\n          if (processInExecution.quantum === quantum) {\n            processInExecution.resetQuantum()\n\n            const nextReadyProc = readyProcesses.shift()\n            if (nextReadyProc instanceof Process) {\n              if (nextReadyProc.startTime === -1) {\n                nextReadyProc.startTime = globalTime\n              }\n              readyProcesses.push(processInExecution)\n              setProcessInExecution(nextReadyProc)\n            }\n\n            return\n          }\n\n          if (processInExecution.timeToUnblock === 0) {\n            processInExecution.update()\n          }\n        }\n      } else {\n        // If there is no process in execution, check if one is ready\n        if (readyProcesses.length > 0) {\n          const nextProc = readyProcesses.shift()\n          if (nextProc.startTime === -1) {\n            nextProc.startTime = globalTime\n          }\n          setProcessInExecution(nextProc)\n        }\n      }\n    }\n  }, [reportLogged, setGlobalTime, globalTime, setIsPaused, isPaused, isProcessing, processInExecution, terminatedProcesses, newProcesses, readyProcesses, blockedProcesses, setBlockedProcesses, setTerminatedProcesses])\n\n  return (\n    <>\n      <Container>\n        <div style={{ textAlign: 'center' }}>\n          <h1>New processes: {newProcesses.length}</h1>\n          <h1>Suspended processes: {suspendedProcesses.length}</h1>\n          <h2>Quantum: {quantum}</h2>\n          {\n            !isProcessing && simulationEnd !== null\n              ? (\n                <>\n                  <h2>Global Time: {simulationEnd} seconds</h2>\n                  <Button onClick={processingDone}>Return</Button>\n                </>\n                )\n              : (<h2>Global Time: {globalTime} seconds</h2>)\n          }\n        </div>\n        <br />\n        <Window title='ready - Process Simulation' icon={<BatWait variant='32x32_4' />}>\n          {\n            readyProcesses.map((process, index) => (\n              <Fieldset key={index} legend={`PID ${process.id}`} style={{ width: '90%', textAlign: 'left', marginBottom: 10 }}>\n                <p key={index + '_p'}>Estimated execution time: {process.maxTime} seconds - Ellapsed time: {process.executionTime} seconds - Size: {process.size}MB</p>\n              </Fieldset>)\n            )\n          }\n        </Window>\n        <Window title='execution - Process Simulation' icon={<BatExec2 variant='32x32_4' />}>\n          {\n            processInExecution instanceof Process\n              ? (\n                <Fieldset legend={`PID ${processInExecution.id}`} className='process-fieldset'>\n                  <p>Operation: {processInExecution.operation}</p>\n                  <p>Estimated execution time: {processInExecution.maxTime} seconds</p>\n                  <p>Ellapsed time: {processInExecution.executionTime} seconds</p>\n                  <p>Missing time: {processInExecution.maxTime - processInExecution.executionTime} seconds</p>\n                  <p>Quantum: {processInExecution.quantum}</p>\n                  <p>Size: {processInExecution.size}MB</p>\n                  <ProgressBar width={200} percent={Math.round(processInExecution.executionTime / processInExecution.maxTime * 100)} />\n                </Fieldset>\n                )\n              : (<></>)\n          }\n        </Window>\n        <Window title='blocked - Process Simulation' icon={<User2 variant='32x32_4' />}>\n          {\n            Array.isArray(blockedProcesses)\n              ? blockedProcesses.map((process, index) => (\n                <Fieldset key={index} legend={`PID ${process.id}`} style={{ width: '90%', textAlign: 'left', marginBottom: 10 }}>\n                  <p key={index + '_p'}>Estimated execution time: {process.maxTime} seconds - Blocked time: {7 - process.timeToUnblock} seconds</p>\n                </Fieldset>)\n              )\n              : (<></>)\n          }\n        </Window>\n        {renderSuspendedProcessesPeek()}\n        <Window title='terminated - Process Simulation' icon={<Qfecheck111 variant='32x32_4' />}>\n          {\n            Array.isArray(terminatedProcesses)\n              ? terminatedProcesses.map(process => (\n                <Fieldset key={process.id} legend={`PID ${process.id}`} className='process-fieldset'>\n                  <p key={process.id + '_p'}>{process.operation} = {process.result}</p>\n                </Fieldset>)\n              )\n              : (<></>)\n          }\n        </Window>\n        <Window title='logs.txt - Notepad' icon={<Notepad variant='32x32_4' />}>\n          <TextArea readOnly value={actionLogs} style={{ width: '100%', height: 200 }} />\n          <br /><br />\n          <Button onClick={() => { setActionLogs('') }}>Clear logs</Button>\n        </Window>\n        {renderMemoryVisualization()}\n        <br />\n      </Container>\n      <TaskBar\n        list={\n          <List>\n            <List.Item\n              key='reset'\n              icon={<RecycleEmpty variant='32x32_4' />}\n              onClick={() => {\n                setIsProcessing(false)\n                processingDone()\n              }}\n            >\n              Empty and Restart\n            </List.Item>\n          </List>\n        }\n      />\n    </>\n  )\n}\n\nRoundRobin.propTypes = {\n  totalProcesses: PropTypes.number,\n  processingDone: PropTypes.func,\n  quantum: PropTypes.number\n}\n\nexport default RoundRobin\n","import styled from 'styled-components'\n\nimport { Button, Input } from '@react95/core'\nimport React, { useState } from 'react'\n\nimport Title from './components/Title'\nimport RoundRobin from './pages/RoundRobin'\n\nconst Form = styled.form`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  height: 100%;\n`\n\nfunction App () {\n  const [totalProcesses, setTotalProcesses] = useState(0)\n  const [quantum, setQuantum] = useState(0)\n  const [isProcessing, setIsProcessing] = useState(false)\n\n  const startProcessing = e => {\n    e.preventDefault()\n    setIsProcessing(true)\n  }\n\n  const processingDone = () => {\n    setIsProcessing(false)\n  }\n\n  return (\n    isProcessing === false\n      ? (\n          <Form onSubmit={startProcessing}>\n            <Title>Round Robin</Title>\n            <Input\n              placeholder='# of processes'\n              style={{ marginBottom: 10 }}\n              type='number'\n              min='1'\n              onChange={({ target }) => setTotalProcesses(target.value)}\n              required\n            />\n            <br />\n            <Input\n              placeholder='Quantum'\n              style={{ marginBottom: 10 }}\n              type='number'\n              min='1'\n              onChange={({ target }) => setQuantum(target.value)}\n              required\n            />\n            <br />\n            <Button>Start</Button>\n          </Form>\n        )\n      : (<RoundRobin totalProcesses={parseInt(totalProcesses)} processingDone={processingDone} quantum={parseInt(quantum)} />)\n  )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { ThemeProvider, GlobalStyle } from '@react95/core'\n\nimport './index.css'\nimport App from './App'\n\nReactDOM.render(\n  <ThemeProvider>\n    <GlobalStyle />\n      <App />\n  </ThemeProvider>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}